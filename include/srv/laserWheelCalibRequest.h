// Generated by gencpp from file calib_fusion_2d/laserWheelCalibRequest.msg
// DO NOT EDIT!


#ifndef CALIB_FUSION_2D_MESSAGE_LASERWHEELCALIBREQUEST_H
#define CALIB_FUSION_2D_MESSAGE_LASERWHEELCALIBREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace calib_fusion_2d
{
template <class ContainerAllocator>
struct laserWheelCalibRequest_
{
  typedef laserWheelCalibRequest_<ContainerAllocator> Type;

  laserWheelCalibRequest_()
    : task(0)  {
    }
  laserWheelCalibRequest_(const ContainerAllocator& _alloc)
    : task(0)  {
  (void)_alloc;
    }



   typedef uint8_t _task_type;
  _task_type task;





  typedef boost::shared_ptr< ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator> const> ConstPtr;

}; // struct laserWheelCalibRequest_

typedef ::calib_fusion_2d::laserWheelCalibRequest_<std::allocator<void> > laserWheelCalibRequest;

typedef boost::shared_ptr< ::calib_fusion_2d::laserWheelCalibRequest > laserWheelCalibRequestPtr;
typedef boost::shared_ptr< ::calib_fusion_2d::laserWheelCalibRequest const> laserWheelCalibRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator1> & lhs, const ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator2> & rhs)
{
  return lhs.task == rhs.task;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator1> & lhs, const ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace calib_fusion_2d

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cfae433ef22bd8313f92bc5cad00c264";
  }

  static const char* value(const ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcfae433ef22bd831ULL;
  static const uint64_t static_value2 = 0x3f92bc5cad00c264ULL;
};

template<class ContainerAllocator>
struct DataType< ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "calib_fusion_2d/laserWheelCalibRequest";
  }

  static const char* value(const ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 task\n"
;
  }

  static const char* value(const ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct laserWheelCalibRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::calib_fusion_2d::laserWheelCalibRequest_<ContainerAllocator>& v)
  {
    s << indent << "task: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.task);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CALIB_FUSION_2D_MESSAGE_LASERWHEELCALIBREQUEST_H
