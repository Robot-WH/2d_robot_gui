// Generated by gencpp from file calib_fusion_2d/laserWheelCalibRes.msg
// DO NOT EDIT!


#ifndef CALIB_FUSION_2D_MESSAGE_LASERWHEELCALIBRES_H
#define CALIB_FUSION_2D_MESSAGE_LASERWHEELCALIBRES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace calib_fusion_2d
{
template <class ContainerAllocator>
struct laserWheelCalibRes_
{
  typedef laserWheelCalibRes_<ContainerAllocator> Type;

  laserWheelCalibRes_()
    : trans_scale(0.0)
    , rot_scale(0.0)
    , x(0.0)
    , y(0.0)
    , theta(0.0)  {
    }
  laserWheelCalibRes_(const ContainerAllocator& _alloc)
    : trans_scale(0.0)
    , rot_scale(0.0)
    , x(0.0)
    , y(0.0)
    , theta(0.0)  {
  (void)_alloc;
    }



   typedef float _trans_scale_type;
  _trans_scale_type trans_scale;

   typedef float _rot_scale_type;
  _rot_scale_type rot_scale;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _theta_type;
  _theta_type theta;





  typedef boost::shared_ptr< ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator> const> ConstPtr;

}; // struct laserWheelCalibRes_

typedef ::calib_fusion_2d::laserWheelCalibRes_<std::allocator<void> > laserWheelCalibRes;

typedef boost::shared_ptr< ::calib_fusion_2d::laserWheelCalibRes > laserWheelCalibResPtr;
typedef boost::shared_ptr< ::calib_fusion_2d::laserWheelCalibRes const> laserWheelCalibResConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator1> & lhs, const ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator2> & rhs)
{
  return lhs.trans_scale == rhs.trans_scale &&
    lhs.rot_scale == rhs.rot_scale &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.theta == rhs.theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator1> & lhs, const ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace calib_fusion_2d

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e45051faac65fba8c9b282bf47abaa5a";
  }

  static const char* value(const ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe45051faac65fba8ULL;
  static const uint64_t static_value2 = 0xc9b282bf47abaa5aULL;
};

template<class ContainerAllocator>
struct DataType< ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "calib_fusion_2d/laserWheelCalibRes";
  }

  static const char* value(const ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 trans_scale\n"
"float32 rot_scale\n"
"float32 x\n"
"float32 y\n"
"float32 theta\n"
;
  }

  static const char* value(const ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trans_scale);
      stream.next(m.rot_scale);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct laserWheelCalibRes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::calib_fusion_2d::laserWheelCalibRes_<ContainerAllocator>& v)
  {
    s << indent << "trans_scale: ";
    Printer<float>::stream(s, indent + "  ", v.trans_scale);
    s << indent << "rot_scale: ";
    Printer<float>::stream(s, indent + "  ", v.rot_scale);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CALIB_FUSION_2D_MESSAGE_LASERWHEELCALIBRES_H
